<?php
/**
 * ExportsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kizeo REST
 *
 * This is a Swagger generated doc for Kizeo REST API 3. You can find additionnal documentation here : [Online documentation](/doc).
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@kizeo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KizeoFormsApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use KizeoFormsApi\Client\ApiException;
use KizeoFormsApi\Client\Configuration;
use KizeoFormsApi\Client\HeaderSelector;
use KizeoFormsApi\Client\ObjectSerializer;

/**
 * ExportsApi Class Doc Comment
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'formsFormIdDataDataIdExportsExportIdGet' => [
            'application/json',
        ],
        'formsFormIdDataDataIdExportsExportIdPdfGet' => [
            'application/json',
        ],
        'formsFormIdDataDataIdFormPicturesMediaNameGet' => [
            'application/json',
        ],
        'formsFormIdDataDataIdMediasMediaNameGet' => [
            'application/json',
        ],
        'formsFormIdDataDataIdPdfGet' => [
            'application/json',
        ],
        'formsFormIdDataMultipleCsvCustomPost' => [
            'application/json',
        ],
        'formsFormIdDataMultipleCsvPost' => [
            'application/json',
        ],
        'formsFormIdDataMultipleExcelCustomPost' => [
            'application/json',
        ],
        'formsFormIdDataMultipleExcelPost' => [
            'application/json',
        ],
        'formsFormIdExportsGet' => [
            'application/json',
        ],
        'formsFormIdMultipleDataExportsExportIdPdfPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdGet
     *
     * Export data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function formsFormIdDataDataIdExportsExportIdGet($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'][0])
    {
        list($response) = $this->formsFormIdDataDataIdExportsExportIdGetWithHttpInfo($form_id, $data_id, $export_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdGetWithHttpInfo
     *
     * Export data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdExportsExportIdGetWithHttpInfo($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'][0])
    {
        $request = $this->formsFormIdDataDataIdExportsExportIdGetRequest($form_id, $data_id, $export_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdGetAsync
     *
     * Export data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdExportsExportIdGetAsync($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'][0])
    {
        return $this->formsFormIdDataDataIdExportsExportIdGetAsyncWithHttpInfo($form_id, $data_id, $export_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdGetAsyncWithHttpInfo
     *
     * Export data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdExportsExportIdGetAsyncWithHttpInfo($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'][0])
    {
        $returnType = 'string';
        $request = $this->formsFormIdDataDataIdExportsExportIdGetRequest($form_id, $data_id, $export_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdExportsExportIdGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdExportsExportIdGetRequest($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdExportsExportIdGet'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdExportsExportIdGet'
            );
        }

        // verify the required parameter 'export_id' is set
        if ($export_id === null || (is_array($export_id) && count($export_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_id when calling formsFormIdDataDataIdExportsExportIdGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}/exports/{exportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }
        // path params
        if ($export_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exportId' . '}',
                ObjectSerializer::toPathValue($export_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdPdfGet
     *
     * Export data (PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function formsFormIdDataDataIdExportsExportIdPdfGet($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'][0])
    {
        list($response) = $this->formsFormIdDataDataIdExportsExportIdPdfGetWithHttpInfo($form_id, $data_id, $export_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdPdfGetWithHttpInfo
     *
     * Export data (PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdExportsExportIdPdfGetWithHttpInfo($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'][0])
    {
        $request = $this->formsFormIdDataDataIdExportsExportIdPdfGetRequest($form_id, $data_id, $export_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdPdfGetAsync
     *
     * Export data (PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdExportsExportIdPdfGetAsync($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'][0])
    {
        return $this->formsFormIdDataDataIdExportsExportIdPdfGetAsyncWithHttpInfo($form_id, $data_id, $export_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdExportsExportIdPdfGetAsyncWithHttpInfo
     *
     * Export data (PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdExportsExportIdPdfGetAsyncWithHttpInfo($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'][0])
    {
        $returnType = 'string';
        $request = $this->formsFormIdDataDataIdExportsExportIdPdfGetRequest($form_id, $data_id, $export_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdExportsExportIdPdfGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdExportsExportIdPdfGetRequest($form_id, $data_id, $export_id, string $contentType = self::contentTypes['formsFormIdDataDataIdExportsExportIdPdfGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdExportsExportIdPdfGet'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdExportsExportIdPdfGet'
            );
        }

        // verify the required parameter 'export_id' is set
        if ($export_id === null || (is_array($export_id) && count($export_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_id when calling formsFormIdDataDataIdExportsExportIdPdfGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}/exports/{exportId}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }
        // path params
        if ($export_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exportId' . '}',
                ObjectSerializer::toPathValue($export_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdFormPicturesMediaNameGet
     *
     * Get one fixed image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataDataIdFormPicturesMediaNameGet($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'][0])
    {
        $this->formsFormIdDataDataIdFormPicturesMediaNameGetWithHttpInfo($form_id, $data_id, $media_name, $contentType);
    }

    /**
     * Operation formsFormIdDataDataIdFormPicturesMediaNameGetWithHttpInfo
     *
     * Get one fixed image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdFormPicturesMediaNameGetWithHttpInfo($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'][0])
    {
        $request = $this->formsFormIdDataDataIdFormPicturesMediaNameGetRequest($form_id, $data_id, $media_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdFormPicturesMediaNameGetAsync
     *
     * Get one fixed image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdFormPicturesMediaNameGetAsync($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'][0])
    {
        return $this->formsFormIdDataDataIdFormPicturesMediaNameGetAsyncWithHttpInfo($form_id, $data_id, $media_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdFormPicturesMediaNameGetAsyncWithHttpInfo
     *
     * Get one fixed image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdFormPicturesMediaNameGetAsyncWithHttpInfo($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataDataIdFormPicturesMediaNameGetRequest($form_id, $data_id, $media_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdFormPicturesMediaNameGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdFormPicturesMediaNameGetRequest($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdFormPicturesMediaNameGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdFormPicturesMediaNameGet'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdFormPicturesMediaNameGet'
            );
        }

        // verify the required parameter 'media_name' is set
        if ($media_name === null || (is_array($media_name) && count($media_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_name when calling formsFormIdDataDataIdFormPicturesMediaNameGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}/form_pictures/{mediaName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }
        // path params
        if ($media_name !== null) {
            $resourcePath = str_replace(
                '{' . 'mediaName' . '}',
                ObjectSerializer::toPathValue($media_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdMediasMediaNameGet
     *
     * Get one image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataDataIdMediasMediaNameGet($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'][0])
    {
        $this->formsFormIdDataDataIdMediasMediaNameGetWithHttpInfo($form_id, $data_id, $media_name, $contentType);
    }

    /**
     * Operation formsFormIdDataDataIdMediasMediaNameGetWithHttpInfo
     *
     * Get one image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdMediasMediaNameGetWithHttpInfo($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'][0])
    {
        $request = $this->formsFormIdDataDataIdMediasMediaNameGetRequest($form_id, $data_id, $media_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdMediasMediaNameGetAsync
     *
     * Get one image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdMediasMediaNameGetAsync($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'][0])
    {
        return $this->formsFormIdDataDataIdMediasMediaNameGetAsyncWithHttpInfo($form_id, $data_id, $media_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdMediasMediaNameGetAsyncWithHttpInfo
     *
     * Get one image of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdMediasMediaNameGetAsyncWithHttpInfo($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataDataIdMediasMediaNameGetRequest($form_id, $data_id, $media_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdMediasMediaNameGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $media_name Name of the image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdMediasMediaNameGetRequest($form_id, $data_id, $media_name, string $contentType = self::contentTypes['formsFormIdDataDataIdMediasMediaNameGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdMediasMediaNameGet'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdMediasMediaNameGet'
            );
        }

        // verify the required parameter 'media_name' is set
        if ($media_name === null || (is_array($media_name) && count($media_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_name when calling formsFormIdDataDataIdMediasMediaNameGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}/medias/{mediaName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }
        // path params
        if ($media_name !== null) {
            $resourcePath = str_replace(
                '{' . 'mediaName' . '}',
                ObjectSerializer::toPathValue($media_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdPdfGet
     *
     * Get PDF data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdPdfGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataDataIdPdfGet($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdPdfGet'][0])
    {
        $this->formsFormIdDataDataIdPdfGetWithHttpInfo($form_id, $data_id, $contentType);
    }

    /**
     * Operation formsFormIdDataDataIdPdfGetWithHttpInfo
     *
     * Get PDF data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdPdfGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdPdfGetWithHttpInfo($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdPdfGet'][0])
    {
        $request = $this->formsFormIdDataDataIdPdfGetRequest($form_id, $data_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdPdfGetAsync
     *
     * Get PDF data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdPdfGetAsync($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdPdfGet'][0])
    {
        return $this->formsFormIdDataDataIdPdfGetAsyncWithHttpInfo($form_id, $data_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdPdfGetAsyncWithHttpInfo
     *
     * Get PDF data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdPdfGetAsyncWithHttpInfo($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdPdfGet'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataDataIdPdfGetRequest($form_id, $data_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdPdfGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdPdfGetRequest($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdPdfGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdPdfGet'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdPdfGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataMultipleCsvCustomPost
     *
     * Get custom CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvCustomPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataMultipleCsvCustomPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvCustomPost'][0])
    {
        $this->formsFormIdDataMultipleCsvCustomPostWithHttpInfo($form_id, $body, $contentType);
    }

    /**
     * Operation formsFormIdDataMultipleCsvCustomPostWithHttpInfo
     *
     * Get custom CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvCustomPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataMultipleCsvCustomPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvCustomPost'][0])
    {
        $request = $this->formsFormIdDataMultipleCsvCustomPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataMultipleCsvCustomPostAsync
     *
     * Get custom CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvCustomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleCsvCustomPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvCustomPost'][0])
    {
        return $this->formsFormIdDataMultipleCsvCustomPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataMultipleCsvCustomPostAsyncWithHttpInfo
     *
     * Get custom CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvCustomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleCsvCustomPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvCustomPost'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataMultipleCsvCustomPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataMultipleCsvCustomPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvCustomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataMultipleCsvCustomPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvCustomPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataMultipleCsvCustomPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataMultipleCsvCustomPost'
            );
        }


        $resourcePath = '/forms/{formId}/data/multiple/csv_custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataMultipleCsvPost
     *
     * Get CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataMultipleCsvPost($form_id, $body = null, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvPost'][0])
    {
        $this->formsFormIdDataMultipleCsvPostWithHttpInfo($form_id, $body, $contentType);
    }

    /**
     * Operation formsFormIdDataMultipleCsvPostWithHttpInfo
     *
     * Get CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataMultipleCsvPostWithHttpInfo($form_id, $body = null, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvPost'][0])
    {
        $request = $this->formsFormIdDataMultipleCsvPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataMultipleCsvPostAsync
     *
     * Get CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleCsvPostAsync($form_id, $body = null, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvPost'][0])
    {
        return $this->formsFormIdDataMultipleCsvPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataMultipleCsvPostAsyncWithHttpInfo
     *
     * Get CSV data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleCsvPostAsyncWithHttpInfo($form_id, $body = null, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvPost'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataMultipleCsvPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataMultipleCsvPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleCsvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataMultipleCsvPostRequest($form_id, $body = null, string $contentType = self::contentTypes['formsFormIdDataMultipleCsvPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataMultipleCsvPost'
            );
        }



        $resourcePath = '/forms/{formId}/data/multiple/csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataMultipleExcelCustomPost
     *
     * Get custom Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelCustomPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataMultipleExcelCustomPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelCustomPost'][0])
    {
        $this->formsFormIdDataMultipleExcelCustomPostWithHttpInfo($form_id, $body, $contentType);
    }

    /**
     * Operation formsFormIdDataMultipleExcelCustomPostWithHttpInfo
     *
     * Get custom Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelCustomPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataMultipleExcelCustomPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelCustomPost'][0])
    {
        $request = $this->formsFormIdDataMultipleExcelCustomPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataMultipleExcelCustomPostAsync
     *
     * Get custom Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelCustomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleExcelCustomPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelCustomPost'][0])
    {
        return $this->formsFormIdDataMultipleExcelCustomPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataMultipleExcelCustomPostAsyncWithHttpInfo
     *
     * Get custom Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelCustomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleExcelCustomPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelCustomPost'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataMultipleExcelCustomPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataMultipleExcelCustomPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelCustomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataMultipleExcelCustomPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelCustomPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataMultipleExcelCustomPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataMultipleExcelCustomPost'
            );
        }


        $resourcePath = '/forms/{formId}/data/multiple/excel_custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataMultipleExcelPost
     *
     * Get Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataMultipleExcelPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelPost'][0])
    {
        $this->formsFormIdDataMultipleExcelPostWithHttpInfo($form_id, $body, $contentType);
    }

    /**
     * Operation formsFormIdDataMultipleExcelPostWithHttpInfo
     *
     * Get Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataMultipleExcelPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelPost'][0])
    {
        $request = $this->formsFormIdDataMultipleExcelPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataMultipleExcelPostAsync
     *
     * Get Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleExcelPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelPost'][0])
    {
        return $this->formsFormIdDataMultipleExcelPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataMultipleExcelPostAsyncWithHttpInfo
     *
     * Get Excel list data (multiple) of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataMultipleExcelPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelPost'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataMultipleExcelPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataMultipleExcelPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataMultipleExcelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataMultipleExcelPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataMultipleExcelPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataMultipleExcelPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataMultipleExcelPost'
            );
        }


        $resourcePath = '/forms/{formId}/data/multiple/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdExportsGet
     *
     * Get list of Word and Excel exports
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdExportsGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response
     */
    public function formsFormIdExportsGet($form_id, string $contentType = self::contentTypes['formsFormIdExportsGet'][0])
    {
        list($response) = $this->formsFormIdExportsGetWithHttpInfo($form_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdExportsGetWithHttpInfo
     *
     * Get list of Word and Excel exports
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdExportsGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdExportsGetWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdExportsGet'][0])
    {
        $request = $this->formsFormIdExportsGetRequest($form_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdExportsGetAsync
     *
     * Get list of Word and Excel exports
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdExportsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdExportsGetAsync($form_id, string $contentType = self::contentTypes['formsFormIdExportsGet'][0])
    {
        return $this->formsFormIdExportsGetAsyncWithHttpInfo($form_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdExportsGetAsyncWithHttpInfo
     *
     * Get list of Word and Excel exports
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdExportsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdExportsGetAsyncWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdExportsGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdExportsGet200Response';
        $request = $this->formsFormIdExportsGetRequest($form_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdExportsGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdExportsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdExportsGetRequest($form_id, string $contentType = self::contentTypes['formsFormIdExportsGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdExportsGet'
            );
        }


        $resourcePath = '/forms/{formId}/exports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdMultipleDataExportsExportIdPdfPost
     *
     * Export data (multiple / PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function formsFormIdMultipleDataExportsExportIdPdfPost($form_id, $export_id, $body = null, string $contentType = self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'][0])
    {
        list($response) = $this->formsFormIdMultipleDataExportsExportIdPdfPostWithHttpInfo($form_id, $export_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdMultipleDataExportsExportIdPdfPostWithHttpInfo
     *
     * Export data (multiple / PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdMultipleDataExportsExportIdPdfPostWithHttpInfo($form_id, $export_id, $body = null, string $contentType = self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'][0])
    {
        $request = $this->formsFormIdMultipleDataExportsExportIdPdfPostRequest($form_id, $export_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdMultipleDataExportsExportIdPdfPostAsync
     *
     * Export data (multiple / PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMultipleDataExportsExportIdPdfPostAsync($form_id, $export_id, $body = null, string $contentType = self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'][0])
    {
        return $this->formsFormIdMultipleDataExportsExportIdPdfPostAsyncWithHttpInfo($form_id, $export_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdMultipleDataExportsExportIdPdfPostAsyncWithHttpInfo
     *
     * Export data (multiple / PDF)
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMultipleDataExportsExportIdPdfPostAsyncWithHttpInfo($form_id, $export_id, $body = null, string $contentType = self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'][0])
    {
        $returnType = 'string';
        $request = $this->formsFormIdMultipleDataExportsExportIdPdfPostRequest($form_id, $export_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdMultipleDataExportsExportIdPdfPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $export_id ID of requested export model (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids Parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdMultipleDataExportsExportIdPdfPostRequest($form_id, $export_id, $body = null, string $contentType = self::contentTypes['formsFormIdMultipleDataExportsExportIdPdfPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdMultipleDataExportsExportIdPdfPost'
            );
        }

        // verify the required parameter 'export_id' is set
        if ($export_id === null || (is_array($export_id) && count($export_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_id when calling formsFormIdMultipleDataExportsExportIdPdfPost'
            );
        }



        $resourcePath = '/forms/{formId}/multiple_data/exports/{exportId}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($export_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exportId' . '}',
                ObjectSerializer::toPathValue($export_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/zip', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
