<?php
/**
 * DataApi
 * PHP version 7.4
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kizeo REST
 *
 * This is a Swagger generated doc for Kizeo REST API 3. You can find additionnal documentation here : [Online documentation](/doc).
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@kizeo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KizeoFormsApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use KizeoFormsApi\Client\ApiException;
use KizeoFormsApi\Client\Configuration;
use KizeoFormsApi\Client\HeaderSelector;
use KizeoFormsApi\Client\ObjectSerializer;

/**
 * DataApi Class Doc Comment
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'formsFormIdDataAdvancedPost' => [
            'application/json',
        ],
        'formsFormIdDataAllGet' => [
            'application/json',
        ],
        'formsFormIdDataDataIdDeleteDelete' => [
            'application/json',
        ],
        'formsFormIdDataDataIdGet' => [
            'application/json',
        ],
        'formsFormIdDataGet' => [
            'application/json',
        ],
        'formsFormIdDataReadnewGet' => [
            'application/json',
        ],
        'formsFormIdDataSearchPost' => [
            'application/json',
        ],
        'formsFormIdMarkasreadPost' => [
            'application/json',
        ],
        'formsFormIdMarkasunreadPost' => [
            'application/json',
        ],
        'formsFormIdPushDataIdPost' => [
            'application/json',
        ],
        'formsFormIdPushPost' => [
            'application/json',
        ],
        'formsPushInboxGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation formsFormIdDataAdvancedPost
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\AdvancedFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAdvancedPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdDataAdvancedPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataAdvancedPost'][0])
    {
        list($response) = $this->formsFormIdDataAdvancedPostWithHttpInfo($form_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataAdvancedPostWithHttpInfo
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\AdvancedFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAdvancedPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataAdvancedPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataAdvancedPost'][0])
    {
        $request = $this->formsFormIdDataAdvancedPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataAdvancedPostAsync
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\AdvancedFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAdvancedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAdvancedPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataAdvancedPost'][0])
    {
        return $this->formsFormIdDataAdvancedPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataAdvancedPostAsyncWithHttpInfo
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\AdvancedFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAdvancedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAdvancedPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataAdvancedPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdDataAdvancedPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataAdvancedPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\AdvancedFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAdvancedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataAdvancedPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataAdvancedPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataAdvancedPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataAdvancedPost'
            );
        }


        $resourcePath = '/forms/{formId}/data/advanced';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataAllGet
     *
     * Get the list of all data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAllGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdDataAllGet($form_id, string $contentType = self::contentTypes['formsFormIdDataAllGet'][0])
    {
        list($response) = $this->formsFormIdDataAllGetWithHttpInfo($form_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataAllGetWithHttpInfo
     *
     * Get the list of all data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAllGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataAllGetWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdDataAllGet'][0])
    {
        $request = $this->formsFormIdDataAllGetRequest($form_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataAllGetAsync
     *
     * Get the list of all data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAllGetAsync($form_id, string $contentType = self::contentTypes['formsFormIdDataAllGet'][0])
    {
        return $this->formsFormIdDataAllGetAsyncWithHttpInfo($form_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataAllGetAsyncWithHttpInfo
     *
     * Get the list of all data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAllGetAsyncWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdDataAllGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdDataAllGetRequest($form_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataAllGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataAllGetRequest($form_id, string $contentType = self::contentTypes['formsFormIdDataAllGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataAllGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDelete
     *
     * Delete a data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdDeleteDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataDataIdDeleteDelete($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdDeleteDelete'][0])
    {
        $this->formsFormIdDataDataIdDeleteDeleteWithHttpInfo($form_id, $data_id, $contentType);
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDeleteWithHttpInfo
     *
     * Delete a data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdDeleteDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdDeleteDeleteWithHttpInfo($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdDeleteDelete'][0])
    {
        $request = $this->formsFormIdDataDataIdDeleteDeleteRequest($form_id, $data_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDeleteAsync
     *
     * Delete a data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdDeleteDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdDeleteDeleteAsync($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdDeleteDelete'][0])
    {
        return $this->formsFormIdDataDataIdDeleteDeleteAsyncWithHttpInfo($form_id, $data_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDeleteAsyncWithHttpInfo
     *
     * Delete a data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdDeleteDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdDeleteDeleteAsyncWithHttpInfo($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdDeleteDelete'][0])
    {
        $returnType = '';
        $request = $this->formsFormIdDataDataIdDeleteDeleteRequest($form_id, $data_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdDeleteDelete'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdDeleteDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdDeleteDeleteRequest($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdDeleteDelete'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdDeleteDelete'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdDeleteDelete'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdGet
     *
     * Get data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\Data
     */
    public function formsFormIdDataDataIdGet($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdGet'][0])
    {
        list($response) = $this->formsFormIdDataDataIdGetWithHttpInfo($form_id, $data_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataDataIdGetWithHttpInfo
     *
     * Get data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdGetWithHttpInfo($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdGet'][0])
    {
        $request = $this->formsFormIdDataDataIdGetRequest($form_id, $data_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\Data' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\Data' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\Data';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdGetAsync
     *
     * Get data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdGetAsync($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdGet'][0])
    {
        return $this->formsFormIdDataDataIdGetAsyncWithHttpInfo($form_id, $data_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdGetAsyncWithHttpInfo
     *
     * Get data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdGetAsyncWithHttpInfo($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\Data';
        $request = $this->formsFormIdDataDataIdGetRequest($form_id, $data_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataDataIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataDataIdGetRequest($form_id, $data_id, string $contentType = self::contentTypes['formsFormIdDataDataIdGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataDataIdGet'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdDataDataIdGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/{dataId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataGet
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdDataGet($form_id, string $contentType = self::contentTypes['formsFormIdDataGet'][0])
    {
        list($response) = $this->formsFormIdDataGetWithHttpInfo($form_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataGetWithHttpInfo
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataGetWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdDataGet'][0])
    {
        $request = $this->formsFormIdDataGetRequest($form_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataGetAsync
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataGetAsync($form_id, string $contentType = self::contentTypes['formsFormIdDataGet'][0])
    {
        return $this->formsFormIdDataGetAsyncWithHttpInfo($form_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataGetAsyncWithHttpInfo
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataGetAsyncWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdDataGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdDataGetRequest($form_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataGetRequest($form_id, string $contentType = self::contentTypes['formsFormIdDataGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataGet'
            );
        }


        $resourcePath = '/forms/{formId}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataReadnewGet
     *
     * Get content of unread data
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataReadnewGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdDataReadnewGet($form_id, string $contentType = self::contentTypes['formsFormIdDataReadnewGet'][0])
    {
        list($response) = $this->formsFormIdDataReadnewGetWithHttpInfo($form_id, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataReadnewGetWithHttpInfo
     *
     * Get content of unread data
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataReadnewGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataReadnewGetWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdDataReadnewGet'][0])
    {
        $request = $this->formsFormIdDataReadnewGetRequest($form_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataReadnewGetAsync
     *
     * Get content of unread data
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataReadnewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataReadnewGetAsync($form_id, string $contentType = self::contentTypes['formsFormIdDataReadnewGet'][0])
    {
        return $this->formsFormIdDataReadnewGetAsyncWithHttpInfo($form_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataReadnewGetAsyncWithHttpInfo
     *
     * Get content of unread data
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataReadnewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataReadnewGetAsyncWithHttpInfo($form_id, string $contentType = self::contentTypes['formsFormIdDataReadnewGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdDataReadnewGetRequest($form_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataReadnewGet'
     *
     * @param  int $form_id ID of the form (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataReadnewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataReadnewGetRequest($form_id, string $contentType = self::contentTypes['formsFormIdDataReadnewGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataReadnewGet'
            );
        }


        $resourcePath = '/forms/{formId}/data/readnew';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataSearchPost
     *
     * Get List of filtered data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\SearchFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataSearchPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdDataSearchPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataSearchPost'][0])
    {
        list($response) = $this->formsFormIdDataSearchPostWithHttpInfo($form_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdDataSearchPostWithHttpInfo
     *
     * Get List of filtered data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\SearchFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataSearchPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataSearchPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataSearchPost'][0])
    {
        $request = $this->formsFormIdDataSearchPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataSearchPostAsync
     *
     * Get List of filtered data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\SearchFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataSearchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataSearchPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataSearchPost'][0])
    {
        return $this->formsFormIdDataSearchPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataSearchPostAsyncWithHttpInfo
     *
     * Get List of filtered data of a form
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\SearchFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataSearchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataSearchPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataSearchPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdDataSearchPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataSearchPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\SearchFilter $body Data params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdDataSearchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdDataSearchPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdDataSearchPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdDataSearchPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataSearchPost'
            );
        }


        $resourcePath = '/forms/{formId}/data/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdMarkasreadPost
     *
     * Set list of data of a form to read
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasreadPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdMarkasreadPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasreadPost'][0])
    {
        list($response) = $this->formsFormIdMarkasreadPostWithHttpInfo($form_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdMarkasreadPostWithHttpInfo
     *
     * Set list of data of a form to read
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasreadPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdMarkasreadPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasreadPost'][0])
    {
        $request = $this->formsFormIdMarkasreadPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdMarkasreadPostAsync
     *
     * Set list of data of a form to read
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasreadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasreadPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasreadPost'][0])
    {
        return $this->formsFormIdMarkasreadPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdMarkasreadPostAsyncWithHttpInfo
     *
     * Set list of data of a form to read
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasreadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasreadPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasreadPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdMarkasreadPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdMarkasreadPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasreadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdMarkasreadPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasreadPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdMarkasreadPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdMarkasreadPost'
            );
        }


        $resourcePath = '/forms/{formId}/markasread';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdMarkasunreadPost
     *
     * Set list of data of form to unread
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasunreadPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response
     */
    public function formsFormIdMarkasunreadPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasunreadPost'][0])
    {
        list($response) = $this->formsFormIdMarkasunreadPostWithHttpInfo($form_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdMarkasunreadPostWithHttpInfo
     *
     * Set list of data of form to unread
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasunreadPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdMarkasunreadPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasunreadPost'][0])
    {
        $request = $this->formsFormIdMarkasunreadPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdMarkasunreadPostAsync
     *
     * Set list of data of form to unread
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasunreadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasunreadPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasunreadPost'][0])
    {
        return $this->formsFormIdMarkasunreadPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdMarkasunreadPostAsyncWithHttpInfo
     *
     * Set list of data of form to unread
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasunreadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasunreadPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasunreadPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormsFormIdDataGet200Response';
        $request = $this->formsFormIdMarkasunreadPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdMarkasunreadPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataIds $body Data ids parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdMarkasunreadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdMarkasunreadPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdMarkasunreadPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdMarkasunreadPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdMarkasunreadPost'
            );
        }


        $resourcePath = '/forms/{formId}/markasunread';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdPushDataIdPost
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data to edit (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushDataIdPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\DataMin
     */
    public function formsFormIdPushDataIdPost($form_id, $data_id, $body, string $contentType = self::contentTypes['formsFormIdPushDataIdPost'][0])
    {
        list($response) = $this->formsFormIdPushDataIdPostWithHttpInfo($form_id, $data_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdPushDataIdPostWithHttpInfo
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data to edit (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushDataIdPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\DataMin, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdPushDataIdPostWithHttpInfo($form_id, $data_id, $body, string $contentType = self::contentTypes['formsFormIdPushDataIdPost'][0])
    {
        $request = $this->formsFormIdPushDataIdPostRequest($form_id, $data_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\DataMin' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\DataMin' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\DataMin', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\DataMin';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\DataMin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdPushDataIdPostAsync
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data to edit (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushDataIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushDataIdPostAsync($form_id, $data_id, $body, string $contentType = self::contentTypes['formsFormIdPushDataIdPost'][0])
    {
        return $this->formsFormIdPushDataIdPostAsyncWithHttpInfo($form_id, $data_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdPushDataIdPostAsyncWithHttpInfo
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data to edit (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushDataIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushDataIdPostAsyncWithHttpInfo($form_id, $data_id, $body, string $contentType = self::contentTypes['formsFormIdPushDataIdPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\DataMin';
        $request = $this->formsFormIdPushDataIdPostRequest($form_id, $data_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdPushDataIdPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  int $data_id ID of the data to edit (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushDataIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdPushDataIdPostRequest($form_id, $data_id, $body, string $contentType = self::contentTypes['formsFormIdPushDataIdPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdPushDataIdPost'
            );
        }

        // verify the required parameter 'data_id' is set
        if ($data_id === null || (is_array($data_id) && count($data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_id when calling formsFormIdPushDataIdPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdPushDataIdPost'
            );
        }


        $resourcePath = '/forms/{formId}/push/{dataId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($data_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdPushPost
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\DataPushResponse
     */
    public function formsFormIdPushPost($form_id, $body, string $contentType = self::contentTypes['formsFormIdPushPost'][0])
    {
        list($response) = $this->formsFormIdPushPostWithHttpInfo($form_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation formsFormIdPushPostWithHttpInfo
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\DataPushResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdPushPostWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdPushPost'][0])
    {
        $request = $this->formsFormIdPushPostRequest($form_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\DataPushResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\DataPushResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\DataPushResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\DataPushResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\DataPushResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdPushPostAsync
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushPostAsync($form_id, $body, string $contentType = self::contentTypes['formsFormIdPushPost'][0])
    {
        return $this->formsFormIdPushPostAsyncWithHttpInfo($form_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdPushPostAsyncWithHttpInfo
     *
     * Send push with data
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushPostAsyncWithHttpInfo($form_id, $body, string $contentType = self::contentTypes['formsFormIdPushPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\DataPushResponse';
        $request = $this->formsFormIdPushPostRequest($form_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdPushPost'
     *
     * @param  int $form_id ID of the form (required)
     * @param  \KizeoFormsApi\Client\Model\DataPush $body Data parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsFormIdPushPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsFormIdPushPostRequest($form_id, $body, string $contentType = self::contentTypes['formsFormIdPushPost'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling formsFormIdPushPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdPushPost'
            );
        }


        $resourcePath = '/forms/{formId}/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsPushInboxGet
     *
     * Receive new pushed data
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsPushInboxGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\FormMin
     */
    public function formsPushInboxGet(string $contentType = self::contentTypes['formsPushInboxGet'][0])
    {
        list($response) = $this->formsPushInboxGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation formsPushInboxGetWithHttpInfo
     *
     * Receive new pushed data
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsPushInboxGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\FormMin, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsPushInboxGetWithHttpInfo(string $contentType = self::contentTypes['formsPushInboxGet'][0])
    {
        $request = $this->formsPushInboxGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\FormMin' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\FormMin' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\FormMin', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\FormMin';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\FormMin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsPushInboxGetAsync
     *
     * Receive new pushed data
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsPushInboxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsPushInboxGetAsync(string $contentType = self::contentTypes['formsPushInboxGet'][0])
    {
        return $this->formsPushInboxGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsPushInboxGetAsyncWithHttpInfo
     *
     * Receive new pushed data
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsPushInboxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsPushInboxGetAsyncWithHttpInfo(string $contentType = self::contentTypes['formsPushInboxGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\FormMin';
        $request = $this->formsPushInboxGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsPushInboxGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['formsPushInboxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function formsPushInboxGetRequest(string $contentType = self::contentTypes['formsPushInboxGet'][0])
    {


        $resourcePath = '/forms/push/inbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
