<?php
/**
 * GroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kizeo REST
 *
 * This is a Swagger generated doc for Kizeo REST API 3. You can find additionnal documentation here : [Online documentation](/doc).
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@kizeo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KizeoFormsApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use KizeoFormsApi\Client\ApiException;
use KizeoFormsApi\Client\Configuration;
use KizeoFormsApi\Client\HeaderSelector;
use KizeoFormsApi\Client\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'groupGroupIdDelete' => [
            'application/json',
        ],
        'groupGroupIdGet' => [
            'application/json',
        ],
        'groupGroupIdLeaderLeaderIdDelete' => [
            'application/json',
        ],
        'groupGroupIdLeaderLeaderIdPost' => [
            'application/json',
        ],
        'groupGroupIdLeadersGet' => [
            'application/json',
        ],
        'groupGroupIdLeadersPost' => [
            'application/json',
        ],
        'groupGroupIdPut' => [
            'application/json',
        ],
        'groupGroupIdUserUserIdDelete' => [
            'application/json',
        ],
        'groupGroupIdUserUserIdPost' => [
            'application/json',
        ],
        'groupGroupIdUsersGet' => [
            'application/json',
        ],
        'groupGroupIdUsersPost' => [
            'application/json',
        ],
        'groupPost' => [
            'application/json',
        ],
        'groupsGet' => [
            'application/json',
        ],
        'groupsOrderedGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation groupGroupIdDelete
     *
     * Delete a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupGroupIdDelete($group_id, string $contentType = self::contentTypes['groupGroupIdDelete'][0])
    {
        $this->groupGroupIdDeleteWithHttpInfo($group_id, $contentType);
    }

    /**
     * Operation groupGroupIdDeleteWithHttpInfo
     *
     * Delete a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdDeleteWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdDelete'][0])
    {
        $request = $this->groupGroupIdDeleteRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdDeleteAsync
     *
     * Delete a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdDeleteAsync($group_id, string $contentType = self::contentTypes['groupGroupIdDelete'][0])
    {
        return $this->groupGroupIdDeleteAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdDeleteAsyncWithHttpInfo
     *
     * Delete a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdDeleteAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdDelete'][0])
    {
        $returnType = '';
        $request = $this->groupGroupIdDeleteRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdDelete'
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdDeleteRequest($group_id, string $contentType = self::contentTypes['groupGroupIdDelete'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdDelete'
            );
        }


        $resourcePath = '/group/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdGet
     *
     * Get a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupComplete
     */
    public function groupGroupIdGet($group_id, string $contentType = self::contentTypes['groupGroupIdGet'][0])
    {
        list($response) = $this->groupGroupIdGetWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdGetWithHttpInfo
     *
     * Get a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupComplete, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdGetWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdGet'][0])
    {
        $request = $this->groupGroupIdGetRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupComplete' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupComplete' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupComplete', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupComplete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdGetAsync
     *
     * Get a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdGetAsync($group_id, string $contentType = self::contentTypes['groupGroupIdGet'][0])
    {
        return $this->groupGroupIdGetAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdGetAsyncWithHttpInfo
     *
     * Get a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdGetAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
        $request = $this->groupGroupIdGetRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdGet'
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdGetRequest($group_id, string $contentType = self::contentTypes['groupGroupIdGet'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdGet'
            );
        }


        $resourcePath = '/group/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdDelete
     *
     * Remove a leader from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupComplete
     */
    public function groupGroupIdLeaderLeaderIdDelete($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdDelete'][0])
    {
        list($response) = $this->groupGroupIdLeaderLeaderIdDeleteWithHttpInfo($group_id, $leader_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdDeleteWithHttpInfo
     *
     * Remove a leader from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupComplete, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdLeaderLeaderIdDeleteWithHttpInfo($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdDelete'][0])
    {
        $request = $this->groupGroupIdLeaderLeaderIdDeleteRequest($group_id, $leader_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupComplete' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupComplete' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupComplete', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupComplete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdDeleteAsync
     *
     * Remove a leader from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeaderLeaderIdDeleteAsync($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdDelete'][0])
    {
        return $this->groupGroupIdLeaderLeaderIdDeleteAsyncWithHttpInfo($group_id, $leader_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdDeleteAsyncWithHttpInfo
     *
     * Remove a leader from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeaderLeaderIdDeleteAsyncWithHttpInfo($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdDelete'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
        $request = $this->groupGroupIdLeaderLeaderIdDeleteRequest($group_id, $leader_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdLeaderLeaderIdDelete'
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdLeaderLeaderIdDeleteRequest($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdDelete'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdLeaderLeaderIdDelete'
            );
        }

        // verify the required parameter 'leader_id' is set
        if ($leader_id === null || (is_array($leader_id) && count($leader_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leader_id when calling groupGroupIdLeaderLeaderIdDelete'
            );
        }


        $resourcePath = '/group/{groupId}/leader/{leaderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($leader_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaderId' . '}',
                ObjectSerializer::toPathValue($leader_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdPost
     *
     * Add a leader into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupComplete
     */
    public function groupGroupIdLeaderLeaderIdPost($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdPost'][0])
    {
        list($response) = $this->groupGroupIdLeaderLeaderIdPostWithHttpInfo($group_id, $leader_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdPostWithHttpInfo
     *
     * Add a leader into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupComplete, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdLeaderLeaderIdPostWithHttpInfo($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdPost'][0])
    {
        $request = $this->groupGroupIdLeaderLeaderIdPostRequest($group_id, $leader_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupComplete' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupComplete' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupComplete', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupComplete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdPostAsync
     *
     * Add a leader into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeaderLeaderIdPostAsync($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdPost'][0])
    {
        return $this->groupGroupIdLeaderLeaderIdPostAsyncWithHttpInfo($group_id, $leader_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdLeaderLeaderIdPostAsyncWithHttpInfo
     *
     * Add a leader into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeaderLeaderIdPostAsyncWithHttpInfo($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
        $request = $this->groupGroupIdLeaderLeaderIdPostRequest($group_id, $leader_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdLeaderLeaderIdPost'
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $leader_id Id of the leader (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeaderLeaderIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdLeaderLeaderIdPostRequest($group_id, $leader_id, string $contentType = self::contentTypes['groupGroupIdLeaderLeaderIdPost'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdLeaderLeaderIdPost'
            );
        }

        // verify the required parameter 'leader_id' is set
        if ($leader_id === null || (is_array($leader_id) && count($leader_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leader_id when calling groupGroupIdLeaderLeaderIdPost'
            );
        }


        $resourcePath = '/group/{groupId}/leader/{leaderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($leader_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaderId' . '}',
                ObjectSerializer::toPathValue($leader_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdLeadersGet
     *
     * Get all groups&#39; leaders of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupUser
     */
    public function groupGroupIdLeadersGet($group_id, string $contentType = self::contentTypes['groupGroupIdLeadersGet'][0])
    {
        list($response) = $this->groupGroupIdLeadersGetWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdLeadersGetWithHttpInfo
     *
     * Get all groups&#39; leaders of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdLeadersGetWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdLeadersGet'][0])
    {
        $request = $this->groupGroupIdLeadersGetRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdLeadersGetAsync
     *
     * Get all groups&#39; leaders of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeadersGetAsync($group_id, string $contentType = self::contentTypes['groupGroupIdLeadersGet'][0])
    {
        return $this->groupGroupIdLeadersGetAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdLeadersGetAsyncWithHttpInfo
     *
     * Get all groups&#39; leaders of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeadersGetAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdLeadersGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupUser';
        $request = $this->groupGroupIdLeadersGetRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdLeadersGet'
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdLeadersGetRequest($group_id, string $contentType = self::contentTypes['groupGroupIdLeadersGet'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdLeadersGet'
            );
        }


        $resourcePath = '/group/{groupId}/leaders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdLeadersPost
     *
     * Add several leaders into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Leaders ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\User
     */
    public function groupGroupIdLeadersPost($group_id, $body, string $contentType = self::contentTypes['groupGroupIdLeadersPost'][0])
    {
        list($response) = $this->groupGroupIdLeadersPostWithHttpInfo($group_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdLeadersPostWithHttpInfo
     *
     * Add several leaders into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Leaders ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdLeadersPostWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['groupGroupIdLeadersPost'][0])
    {
        $request = $this->groupGroupIdLeadersPostRequest($group_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\User' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdLeadersPostAsync
     *
     * Add several leaders into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Leaders ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeadersPostAsync($group_id, $body, string $contentType = self::contentTypes['groupGroupIdLeadersPost'][0])
    {
        return $this->groupGroupIdLeadersPostAsyncWithHttpInfo($group_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdLeadersPostAsyncWithHttpInfo
     *
     * Add several leaders into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Leaders ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdLeadersPostAsyncWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['groupGroupIdLeadersPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\User';
        $request = $this->groupGroupIdLeadersPostRequest($group_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdLeadersPost'
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Leaders ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdLeadersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdLeadersPostRequest($group_id, $body, string $contentType = self::contentTypes['groupGroupIdLeadersPost'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdLeadersPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling groupGroupIdLeadersPost'
            );
        }


        $resourcePath = '/group/{groupId}/leaders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdPut
     *
     * Update a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\GroupModify $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdPut'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupGroupIdPut($group_id, $body, string $contentType = self::contentTypes['groupGroupIdPut'][0])
    {
        $this->groupGroupIdPutWithHttpInfo($group_id, $body, $contentType);
    }

    /**
     * Operation groupGroupIdPutWithHttpInfo
     *
     * Update a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\GroupModify $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdPut'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdPutWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['groupGroupIdPut'][0])
    {
        $request = $this->groupGroupIdPutRequest($group_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdPutAsync
     *
     * Update a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\GroupModify $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdPutAsync($group_id, $body, string $contentType = self::contentTypes['groupGroupIdPut'][0])
    {
        return $this->groupGroupIdPutAsyncWithHttpInfo($group_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdPutAsyncWithHttpInfo
     *
     * Update a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\GroupModify $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdPutAsyncWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['groupGroupIdPut'][0])
    {
        $returnType = '';
        $request = $this->groupGroupIdPutRequest($group_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdPut'
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\GroupModify $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdPutRequest($group_id, $body, string $contentType = self::contentTypes['groupGroupIdPut'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdPut'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling groupGroupIdPut'
            );
        }


        $resourcePath = '/group/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdUserUserIdDelete
     *
     * Remove an user from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupComplete
     */
    public function groupGroupIdUserUserIdDelete($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdDelete'][0])
    {
        list($response) = $this->groupGroupIdUserUserIdDeleteWithHttpInfo($group_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdUserUserIdDeleteWithHttpInfo
     *
     * Remove an user from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdDelete'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupComplete, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdUserUserIdDeleteWithHttpInfo($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdDelete'][0])
    {
        $request = $this->groupGroupIdUserUserIdDeleteRequest($group_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupComplete' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupComplete' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupComplete', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupComplete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdUserUserIdDeleteAsync
     *
     * Remove an user from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUserUserIdDeleteAsync($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdDelete'][0])
    {
        return $this->groupGroupIdUserUserIdDeleteAsyncWithHttpInfo($group_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdUserUserIdDeleteAsyncWithHttpInfo
     *
     * Remove an user from a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUserUserIdDeleteAsyncWithHttpInfo($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdDelete'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
        $request = $this->groupGroupIdUserUserIdDeleteRequest($group_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdUserUserIdDelete'
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdUserUserIdDeleteRequest($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdDelete'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdUserUserIdDelete'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling groupGroupIdUserUserIdDelete'
            );
        }


        $resourcePath = '/group/{groupId}/user/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdUserUserIdPost
     *
     * Add an user into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupComplete
     */
    public function groupGroupIdUserUserIdPost($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdPost'][0])
    {
        list($response) = $this->groupGroupIdUserUserIdPostWithHttpInfo($group_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdUserUserIdPostWithHttpInfo
     *
     * Add an user into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupComplete, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdUserUserIdPostWithHttpInfo($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdPost'][0])
    {
        $request = $this->groupGroupIdUserUserIdPostRequest($group_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupComplete' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupComplete' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupComplete', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupComplete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdUserUserIdPostAsync
     *
     * Add an user into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUserUserIdPostAsync($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdPost'][0])
    {
        return $this->groupGroupIdUserUserIdPostAsyncWithHttpInfo($group_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdUserUserIdPostAsyncWithHttpInfo
     *
     * Add an user into a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUserUserIdPostAsyncWithHttpInfo($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupComplete';
        $request = $this->groupGroupIdUserUserIdPostRequest($group_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdUserUserIdPost'
     *
     * @param  int $group_id Id of the group (required)
     * @param  int $user_id Id of the user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUserUserIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdUserUserIdPostRequest($group_id, $user_id, string $contentType = self::contentTypes['groupGroupIdUserUserIdPost'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdUserUserIdPost'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling groupGroupIdUserUserIdPost'
            );
        }


        $resourcePath = '/group/{groupId}/user/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdUsersGet
     *
     * Get all users of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupUser
     */
    public function groupGroupIdUsersGet($group_id, string $contentType = self::contentTypes['groupGroupIdUsersGet'][0])
    {
        list($response) = $this->groupGroupIdUsersGetWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdUsersGetWithHttpInfo
     *
     * Get all users of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdUsersGetWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdUsersGet'][0])
    {
        $request = $this->groupGroupIdUsersGetRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdUsersGetAsync
     *
     * Get all users of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUsersGetAsync($group_id, string $contentType = self::contentTypes['groupGroupIdUsersGet'][0])
    {
        return $this->groupGroupIdUsersGetAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdUsersGetAsyncWithHttpInfo
     *
     * Get all users of a specific group
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUsersGetAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['groupGroupIdUsersGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupUser';
        $request = $this->groupGroupIdUsersGetRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdUsersGet'
     *
     * @param  int $group_id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdUsersGetRequest($group_id, string $contentType = self::contentTypes['groupGroupIdUsersGet'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdUsersGet'
            );
        }


        $resourcePath = '/group/{groupId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupGroupIdUsersPost
     *
     * Add several users into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Users ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupResponse
     */
    public function groupGroupIdUsersPost($group_id, $body, string $contentType = self::contentTypes['groupGroupIdUsersPost'][0])
    {
        list($response) = $this->groupGroupIdUsersPostWithHttpInfo($group_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation groupGroupIdUsersPostWithHttpInfo
     *
     * Add several users into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Users ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupGroupIdUsersPostWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['groupGroupIdUsersPost'][0])
    {
        $request = $this->groupGroupIdUsersPostRequest($group_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupGroupIdUsersPostAsync
     *
     * Add several users into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Users ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUsersPostAsync($group_id, $body, string $contentType = self::contentTypes['groupGroupIdUsersPost'][0])
    {
        return $this->groupGroupIdUsersPostAsyncWithHttpInfo($group_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupGroupIdUsersPostAsyncWithHttpInfo
     *
     * Add several users into a group
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Users ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupGroupIdUsersPostAsyncWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['groupGroupIdUsersPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupResponse';
        $request = $this->groupGroupIdUsersPostRequest($group_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupGroupIdUsersPost'
     *
     * @param  int $group_id Id of the group (required)
     * @param  \KizeoFormsApi\Client\Model\UserResponse $body Users ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupGroupIdUsersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupGroupIdUsersPostRequest($group_id, $body, string $contentType = self::contentTypes['groupGroupIdUsersPost'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupGroupIdUsersPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling groupGroupIdUsersPost'
            );
        }


        $resourcePath = '/group/{groupId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupPost
     *
     * Create a new group
     *
     * @param  \KizeoFormsApi\Client\Model\Group $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\GroupResponse
     */
    public function groupPost($body, string $contentType = self::contentTypes['groupPost'][0])
    {
        list($response) = $this->groupPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation groupPostWithHttpInfo
     *
     * Create a new group
     *
     * @param  \KizeoFormsApi\Client\Model\Group $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupPost'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\GroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupPostWithHttpInfo($body, string $contentType = self::contentTypes['groupPost'][0])
    {
        $request = $this->groupPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\GroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\GroupResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\GroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\GroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\GroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupPostAsync
     *
     * Create a new group
     *
     * @param  \KizeoFormsApi\Client\Model\Group $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupPostAsync($body, string $contentType = self::contentTypes['groupPost'][0])
    {
        return $this->groupPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupPostAsyncWithHttpInfo
     *
     * Create a new group
     *
     * @param  \KizeoFormsApi\Client\Model\Group $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['groupPost'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\GroupResponse';
        $request = $this->groupPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupPost'
     *
     * @param  \KizeoFormsApi\Client\Model\Group $body Group Parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupPostRequest($body, string $contentType = self::contentTypes['groupPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling groupPost'
            );
        }


        $resourcePath = '/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsGet
     *
     * Get all groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupsGet(string $contentType = self::contentTypes['groupsGet'][0])
    {
        $this->groupsGetWithHttpInfo($contentType);
    }

    /**
     * Operation groupsGetWithHttpInfo
     *
     * Get all groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsGetWithHttpInfo(string $contentType = self::contentTypes['groupsGet'][0])
    {
        $request = $this->groupsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupsGetAsync
     *
     * Get all groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsGetAsync(string $contentType = self::contentTypes['groupsGet'][0])
    {
        return $this->groupsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsGetAsyncWithHttpInfo
     *
     * Get all groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['groupsGet'][0])
    {
        $returnType = '';
        $request = $this->groupsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupsGetRequest(string $contentType = self::contentTypes['groupsGet'][0])
    {


        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsOrderedGet
     *
     * Get all groups ordered
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsOrderedGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KizeoFormsApi\Client\Model\Group
     */
    public function groupsOrderedGet(string $contentType = self::contentTypes['groupsOrderedGet'][0])
    {
        list($response) = $this->groupsOrderedGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation groupsOrderedGetWithHttpInfo
     *
     * Get all groups ordered
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsOrderedGet'] to see the possible values for this operation
     *
     * @throws \KizeoFormsApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KizeoFormsApi\Client\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsOrderedGetWithHttpInfo(string $contentType = self::contentTypes['groupsOrderedGet'][0])
    {
        $request = $this->groupsOrderedGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\KizeoFormsApi\Client\Model\Group' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\KizeoFormsApi\Client\Model\Group' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\KizeoFormsApi\Client\Model\Group', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\KizeoFormsApi\Client\Model\Group';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KizeoFormsApi\Client\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupsOrderedGetAsync
     *
     * Get all groups ordered
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsOrderedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsOrderedGetAsync(string $contentType = self::contentTypes['groupsOrderedGet'][0])
    {
        return $this->groupsOrderedGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsOrderedGetAsyncWithHttpInfo
     *
     * Get all groups ordered
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsOrderedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsOrderedGetAsyncWithHttpInfo(string $contentType = self::contentTypes['groupsOrderedGet'][0])
    {
        $returnType = '\KizeoFormsApi\Client\Model\Group';
        $request = $this->groupsOrderedGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsOrderedGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['groupsOrderedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function groupsOrderedGetRequest(string $contentType = self::contentTypes['groupsOrderedGet'][0])
    {


        $resourcePath = '/groups/ordered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
