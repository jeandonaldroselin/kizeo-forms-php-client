<?php
/**
 * DataData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kizeo REST
 *
 * This is a Swagger generated doc for Kizeo REST API 3. You can find additionnal documentation here : [Online documentation](/doc).
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@kizeo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KizeoFormsApi\Client\Model;

use \ArrayAccess;
use \KizeoFormsApi\Client\ObjectSerializer;

/**
 * DataData Class Doc Comment
 *
 * @category Class
 * @package  KizeoFormsApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Data_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'record_number' => 'int',
        'form_id' => 'int',
        'user_id' => 'int',
        'create_time' => 'string',
        'update_time' => 'string',
        'update_user_id' => 'string',
        'update_user_name' => 'string',
        'hidtory' => 'string',
        'form_unique_id' => 'string',
        'origin_answer' => 'string',
        'answer_time' => 'string',
        'user_name' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'login' => 'string',
        'recipient_name' => 'string',
        'fields' => '\KizeoFormsApi\Client\Model\FieldValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'record_number' => null,
        'form_id' => null,
        'user_id' => null,
        'create_time' => null,
        'update_time' => null,
        'update_user_id' => null,
        'update_user_name' => null,
        'hidtory' => null,
        'form_unique_id' => null,
        'origin_answer' => null,
        'answer_time' => null,
        'user_name' => null,
        'last_name' => null,
        'first_name' => null,
        'phone' => null,
        'email' => null,
        'login' => null,
        'recipient_name' => null,
        'fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'record_number' => false,
        'form_id' => false,
        'user_id' => false,
        'create_time' => false,
        'update_time' => false,
        'update_user_id' => false,
        'update_user_name' => false,
        'hidtory' => false,
        'form_unique_id' => false,
        'origin_answer' => false,
        'answer_time' => false,
        'user_name' => false,
        'last_name' => false,
        'first_name' => false,
        'phone' => false,
        'email' => false,
        'login' => false,
        'recipient_name' => false,
        'fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'record_number' => 'record_number',
        'form_id' => 'form_id',
        'user_id' => 'user_id',
        'create_time' => 'create_time',
        'update_time' => 'update_time',
        'update_user_id' => 'update_user_id',
        'update_user_name' => 'update_user_name',
        'hidtory' => 'hidtory',
        'form_unique_id' => 'form_unique_id',
        'origin_answer' => 'origin_answer',
        'answer_time' => 'answer_time',
        'user_name' => 'user_name',
        'last_name' => 'last_name',
        'first_name' => 'first_name',
        'phone' => 'phone',
        'email' => 'email',
        'login' => 'login',
        'recipient_name' => 'recipient_name',
        'fields' => 'fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'record_number' => 'setRecordNumber',
        'form_id' => 'setFormId',
        'user_id' => 'setUserId',
        'create_time' => 'setCreateTime',
        'update_time' => 'setUpdateTime',
        'update_user_id' => 'setUpdateUserId',
        'update_user_name' => 'setUpdateUserName',
        'hidtory' => 'setHidtory',
        'form_unique_id' => 'setFormUniqueId',
        'origin_answer' => 'setOriginAnswer',
        'answer_time' => 'setAnswerTime',
        'user_name' => 'setUserName',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'login' => 'setLogin',
        'recipient_name' => 'setRecipientName',
        'fields' => 'setFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'record_number' => 'getRecordNumber',
        'form_id' => 'getFormId',
        'user_id' => 'getUserId',
        'create_time' => 'getCreateTime',
        'update_time' => 'getUpdateTime',
        'update_user_id' => 'getUpdateUserId',
        'update_user_name' => 'getUpdateUserName',
        'hidtory' => 'getHidtory',
        'form_unique_id' => 'getFormUniqueId',
        'origin_answer' => 'getOriginAnswer',
        'answer_time' => 'getAnswerTime',
        'user_name' => 'getUserName',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'login' => 'getLogin',
        'recipient_name' => 'getRecipientName',
        'fields' => 'getFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('record_number', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('create_time', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('update_user_id', $data ?? [], null);
        $this->setIfExists('update_user_name', $data ?? [], null);
        $this->setIfExists('hidtory', $data ?? [], null);
        $this->setIfExists('form_unique_id', $data ?? [], null);
        $this->setIfExists('origin_answer', $data ?? [], null);
        $this->setIfExists('answer_time', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('recipient_name', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets record_number
     *
     * @return int|null
     */
    public function getRecordNumber()
    {
        return $this->container['record_number'];
    }

    /**
     * Sets record_number
     *
     * @param int|null $record_number record_number
     *
     * @return self
     */
    public function setRecordNumber($record_number)
    {
        if (is_null($record_number)) {
            throw new \InvalidArgumentException('non-nullable record_number cannot be null');
        }
        $this->container['record_number'] = $record_number;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int|null $form_id form_id
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            throw new \InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string|null $create_time create_time
     *
     * @return self
     */
    public function setCreateTime($create_time)
    {
        if (is_null($create_time)) {
            throw new \InvalidArgumentException('non-nullable create_time cannot be null');
        }
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets update_user_id
     *
     * @return string|null
     */
    public function getUpdateUserId()
    {
        return $this->container['update_user_id'];
    }

    /**
     * Sets update_user_id
     *
     * @param string|null $update_user_id update_user_id
     *
     * @return self
     */
    public function setUpdateUserId($update_user_id)
    {
        if (is_null($update_user_id)) {
            throw new \InvalidArgumentException('non-nullable update_user_id cannot be null');
        }
        $this->container['update_user_id'] = $update_user_id;

        return $this;
    }

    /**
     * Gets update_user_name
     *
     * @return string|null
     */
    public function getUpdateUserName()
    {
        return $this->container['update_user_name'];
    }

    /**
     * Sets update_user_name
     *
     * @param string|null $update_user_name update_user_name
     *
     * @return self
     */
    public function setUpdateUserName($update_user_name)
    {
        if (is_null($update_user_name)) {
            throw new \InvalidArgumentException('non-nullable update_user_name cannot be null');
        }
        $this->container['update_user_name'] = $update_user_name;

        return $this;
    }

    /**
     * Gets hidtory
     *
     * @return string|null
     */
    public function getHidtory()
    {
        return $this->container['hidtory'];
    }

    /**
     * Sets hidtory
     *
     * @param string|null $hidtory hidtory
     *
     * @return self
     */
    public function setHidtory($hidtory)
    {
        if (is_null($hidtory)) {
            throw new \InvalidArgumentException('non-nullable hidtory cannot be null');
        }
        $this->container['hidtory'] = $hidtory;

        return $this;
    }

    /**
     * Gets form_unique_id
     *
     * @return string|null
     */
    public function getFormUniqueId()
    {
        return $this->container['form_unique_id'];
    }

    /**
     * Sets form_unique_id
     *
     * @param string|null $form_unique_id form_unique_id
     *
     * @return self
     */
    public function setFormUniqueId($form_unique_id)
    {
        if (is_null($form_unique_id)) {
            throw new \InvalidArgumentException('non-nullable form_unique_id cannot be null');
        }
        $this->container['form_unique_id'] = $form_unique_id;

        return $this;
    }

    /**
     * Gets origin_answer
     *
     * @return string|null
     */
    public function getOriginAnswer()
    {
        return $this->container['origin_answer'];
    }

    /**
     * Sets origin_answer
     *
     * @param string|null $origin_answer origin_answer
     *
     * @return self
     */
    public function setOriginAnswer($origin_answer)
    {
        if (is_null($origin_answer)) {
            throw new \InvalidArgumentException('non-nullable origin_answer cannot be null');
        }
        $this->container['origin_answer'] = $origin_answer;

        return $this;
    }

    /**
     * Gets answer_time
     *
     * @return string|null
     */
    public function getAnswerTime()
    {
        return $this->container['answer_time'];
    }

    /**
     * Sets answer_time
     *
     * @param string|null $answer_time answer_time
     *
     * @return self
     */
    public function setAnswerTime($answer_time)
    {
        if (is_null($answer_time)) {
            throw new \InvalidArgumentException('non-nullable answer_time cannot be null');
        }
        $this->container['answer_time'] = $answer_time;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        if (is_null($login)) {
            throw new \InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string|null
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string|null $recipient_name recipient_name
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        if (is_null($recipient_name)) {
            throw new \InvalidArgumentException('non-nullable recipient_name cannot be null');
        }
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \KizeoFormsApi\Client\Model\FieldValue[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \KizeoFormsApi\Client\Model\FieldValue[]|null $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


